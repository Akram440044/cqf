# CODE_3_7_QUANTUM_MONTECARLO_INTEGRATION

# import the required libraries  
import matplotlib.pyplot as plt
import numpy as np
import math as m

def uniform_8bits():
    import numpy as np
    from scipy.stats import norm
    from qiskit import QuantumCircuit, execute, Aer, IBMQ
    num_bits = 8
    num_samples = 1
    num_shots = num_bits * num_samples
    qcircuit = QuantumCircuit(1,1)
    qcircuit.h(0)
    qcircuit.measure([0],[0])
    backend = Aer.get_backend('qasm_simulator')
    result = execute(qcircuit, backend, shots=num_shots, memory = True).result()
    counts = result.get_counts(qcircuit)
    shotlist = result.get_memory()
    a = shotlist
    b=''.join(a)
    c = int(str(b),2)
    out_int=c
    out_uniform=out_int/256 
    result = out_uniform
    return result


# INPUTS
N = 100 # number of simulations
a = -2 # start integration interval
b = +5 # end integration interval
x_vector = np.zeros(N)
f_vector = np.zeros(N)

def f_integrand(x):
    result = -pow(x,3) + 5*pow(x,2) - x + 17 # function to integrate
    return result


# Step 1: generate random scenarios in [a,b]
for i in range(N):
    x_vector[i] = (b-a)*uniform_8bits() + a


# Step 2: operations on each scenario
for i in range(N):
    f_vector[i] = f_integrand(x_vector[i])


# Step 3: calculate output estimates
integral_estimate = (b-a)/N*sum(f_vector)
print('N = ', N)
print('quantum integral estimate = ', integral_estimate)


# PLOT draw function and random sample points
x = np.linspace(a, b, 100)
plt.plot(x, f_integrand(x)) # function
plt.scatter(x_vector, f_vector, alpha=.2) # random samples
plt.show() 
