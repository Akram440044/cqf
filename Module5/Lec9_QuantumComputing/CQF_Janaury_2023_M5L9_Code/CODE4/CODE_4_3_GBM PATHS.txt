# CODE 4.3 Geometric Brownian Motion with Monte Carlo 
import math
import scipy as sp
import numpy as np
import matplotlib.pyplot as plt

# STEP 1: INPUTS
S0, T, vol, r = 1, 1, 0.30, 0.1 # GBM parameters
M = 1000 # MC simulations
N = 100 # MC timesteps
dt = T / N
S = np.zeros((N+1,M+1))
ST=np.zeros(M)

# STEP 2: Lognormal distribution
mu = ((r - 0.5 * vol**2) * T + np.log(S0))
sigma = vol * np.sqrt(T)
exact_mean = np.exp(mu + sigma**2/2)

# STEP 3: Generate trajectories using Geometric Brownian Motion
for j in range(M):
    S[0,j]=S0
    for i in range(N):
        epsilon =  sp.random.randn(1)
        S[i+1,j] = S[i,j]*(1+r*dt+vol*math.sqrt(dt)*epsilon)
    ST[j]=S[i+1,j]

# STEP 4: plot trajectories 
t = np.linspace(0,1,N+1)
plt.plot(t,S[:,1:50])
plt.axis('tight')
plt.show()

print('___________ parameters ___________')
print('S0=',S0,' vol=',vol,' r=',r,' T=',T)
print('N = ', N, ' M = ',M)
print('mu = ',mu, ' sigma = ',sigma)
print(' ')
print('____________ results _____________')
print('Exact_mean = ',exact_mean)
print('MC_ST_mean = ',np.mean(ST))
print('__________________________________')
