# CODE_2_9_QISKIT_1_qubit_8_shots_3_bytes
# QISKIT generate 3 bytes (8-bit binary) with 1 qubit 24 shots

import numpy as np
from qiskit import QuantumCircuit, execute, Aer, IBMQ

num_bits = 8
num_samples = 3
num_shots = num_bits * num_samples

# Create a quantum circuit with 1 qubits and 1 classic bits
qcircuit = QuantumCircuit(1,1)
# Add an Hadamard gate to the qubit
qcircuit.h(0)

# Measure and link qubit into classical bit
qcircuit.measure([0],[0])

# Execute the circuit 
backend = Aer.get_backend('qasm_simulator')
result = execute(qcircuit, backend, shots=num_shots, memory = True).result()
counts = result.get_counts(qcircuit)

# get individual shot results
shotlist = result.get_memory()
print(shotlist)
print('')

# initialize vector
out_int = np.zeros(num_samples)

# extract sampples from string of experiments
# transform binary into integers [0,256] out_int
for k in range(num_samples):
    print(k)
    shotlist_segment = shotlist[k*num_bits:(k+1)*num_bits]
    shotlist_as_byte =''.join(shotlist_segment)
    shotlist_as_integer = int(str(shotlist_as_byte),2)
    print(shotlist_segment )
    print(shotlist_as_byte)
    print('')
    out_int[k]=shotlist_as_integer

# print results
print(out_int)


