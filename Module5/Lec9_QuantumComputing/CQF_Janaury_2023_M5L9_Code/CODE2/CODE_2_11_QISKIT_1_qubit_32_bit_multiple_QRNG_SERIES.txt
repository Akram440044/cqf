# CODE_2_11_QISKIT_1_qubit_32_bit_multiple_QRNG_SERIES
# generate 32-bit integers with 1 qubit multiple shots
import numpy as np
from scipy.stats import norm
from qiskit import QuantumCircuit, execute, Aer, IBMQ

num_bits = 32
num_samples = 3
num_shots = num_bits * num_samples

# Create a quantum circuit with 1 qubits and 1 classic bits
qcircuit = QuantumCircuit(1,1)
# Add an Hadamard gate to the qubit
qcircuit.h(0)

# Measure and link qubit into classical bit
qcircuit.measure([0],[0])

# Execute the circuit 
backend = Aer.get_backend('qasm_simulator')
result = execute(qcircuit, backend, shots=num_shots, memory = True).result()
counts = result.get_counts(qcircuit)

# get individual shot results
shotlist = result.get_memory()
print(shotlist)
print('')

# initialize vectors
out_int = np.zeros(num_samples)
out_uniform = np.zeros(num_samples)
out_gauss = np.zeros(num_samples)

# extract sampples from string of experiments
# transform binary into integers [0,4294967296] out_int
# transform integer into uniform [0,1] out_uniform
# transform uniform into gaussian [-inf,+inf+]
for k in range(num_samples):
    print(k)
    a = shotlist[k*num_bits:(k+1)*num_bits]
    b=''.join(a)
    c = int(str(b),2)
    print(a)
    print(b)
    print('')
    out_int[k]=c
    out_uniform[k]=out_int[k]/4294967296 # 
    out_gauss[k]=norm.ppf(out_uniform[k]) # 
    
# print results
print(out_int)
print(out_uniform)
print(out_gauss)
print('')
print(np.mean(out_uniform))
print(np.mean(out_gauss))


